<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
<id>Dougiefresh:FasterParser</id>
<version>2.1</version>

<file name="$sourcedir/Subs.php">
	<operation>
		<search position="before"><![CDATA[return $orders;
}]]></search>
		<add><![CDATA[

 /**
 * Lexicographic permutation function.
 *
 * This is a special type of permutation which involves the order of the set. The next
 * lexicographic permutation of '32541' is '34125'. Numerically, it is simply the smallest
 * set larger than the current one.
 *
 * The benefit of this over a recursive solution is that the whole list does NOT need
 * to be held in memory. So it's actually possible to run 30! permutations without
 * causing a memory overflow.
 *
 * Source: O'Reilly PHP Cookbook
 *
 * @param mixed[] $p An array of permutations
 * @param int $size The size of our array
 *
 * @return mixed[] The next permutation of the passed array $p
 */
function pc_next_permutation($p, $size)
{
	// Slide down the array looking for where we're smaller than the next guy
	for ($i = $size - 1; isset($p[$i]) && $p[$i] >= $p[$i + 1]; --$i)
	{
	}

	// If this doesn't occur, we've finished our permutations
	// the array is reversed: (1, 2, 3, 4) => (4, 3, 2, 1)
	if ($i === -1)
	{
		return false;
	}

	// Slide down the array looking for a bigger number than what we found before
	for ($j = $size; $p[$j] <= $p[$i]; --$j)
	{
	}

	// Swap them
	$tmp = $p[$i];
	$p[$i] = $p[$j];
	$p[$j] = $tmp;

	// Now reverse the elements in between by swapping the ends
	for ($i, $j = $size; $i < $j; $i, --$j)
	{
		$tmp = $p[$i];
		$p[$i] = $p[$j];
		$p[$j] = $tmp;
	}

	return $p;
}
]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA[$preg = array();
				foreach ($possible['parameters'] as $p => $info)
					$preg[] = '(\s+' . $p . '=' . (empty($info['quoted']) ? '' : '&quot;') . (isset($info['match']) ? $info['match'] : '(.+?)') . (empty($info['quoted']) ? '' : '&quot;') . ')' . (empty($info['optional']) ? '' : '?');

				// Okay, this may look ugly and it is, but it's not going to happen much and it is the best way of allowing any order of parameters but still parsing them right.
				$match = false;
				$orders = permute($preg);
				foreach ($orders as $p)
					if (preg_match('~^' . implode('', $p) . '\]~i', substr($message, $pos1 - 1), $matches) != 0)
					{
						$match = true;
						break;
					}

				// Didn't match our parameter list, try the next possible.
				if (!$match)
					continue;]]></search>
		<add><![CDATA[$preg = array();
				foreach ($possible['parameters'] as $p => $info)
					$preg[] = '(\s+' . $p . '=' . (empty($info['quoted']) ? '' : '&quot;') . (isset($info['match']) ? $info['match'] : '(.+?)') . (empty($info['quoted']) ? '' : '&quot;') . ')' . (empty($info['optional']) ? '' : '?');

				// Okay, this may look ugly and it is, but it's not going to happen much and it is the best way of allowing any order of parameters but still parsing them right.
				$param_size = count($preg) - 1;
				$preg_keys = range(0, $param_size);
				$message_stub = substr($message, $pos1 - 1);

				// If sometthhing adds many parameters we can exceed max_execution time; let's prevent that.
				// 5040 = 7, 40,320 = 8, (N!) etc
				$max_iterations = 5040;

				// Step, one by one, through all possible permutations of the parameters until we have a match.
				do
				{
					$match_preg = '~^';
					foreach ($preg_keys as $key)
						$match_preg .= $preg[$key];
					$match_preg .= '\]~i';

					// Check if this combination of parameters matches the user input.
					$match = preg_match($match_preg, $message_stub, $matches) !== 0;
				}
				while (!$match && --$max_iterations && ($preg_keys = pc_next_permutation($preg_keys, $param_size)));

				// Didn't match our parameter list, try the next possible.
				if (!$match)
					continue;]]></add>
	</operation>
</file>
</modification>